/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amount"
      | "approveRelease"
      | "autoRefund"
      | "autoRelease"
      | "deposit"
      | "depositTimestamp"
      | "driver"
      | "isCompleted"
      | "passenger"
      | "refund"
      | "refundTimeout"
      | "releaseTimeout"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposited" | "Refunded" | "Released"
  ): EventFragment;

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoRelease",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "driver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "passenger", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTimeout",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "autoRefund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "driver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTimeout",
    data: BytesLike
  ): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [
    passenger: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    passenger: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    passenger: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    passenger: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    passenger: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    passenger: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleasedEvent {
  export type InputTuple = [
    driver: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish,
    feeRecipient: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    driver: string,
    amount: bigint,
    fee: bigint,
    feeRecipient: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    driver: string;
    amount: bigint;
    fee: bigint;
    feeRecipient: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amount: TypedContractMethod<[], [bigint], "view">;

  approveRelease: TypedContractMethod<[], [void], "nonpayable">;

  autoRefund: TypedContractMethod<[], [void], "nonpayable">;

  autoRelease: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<[], [void], "payable">;

  depositTimestamp: TypedContractMethod<[], [bigint], "view">;

  driver: TypedContractMethod<[], [string], "view">;

  isCompleted: TypedContractMethod<[], [boolean], "view">;

  passenger: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<[], [void], "nonpayable">;

  refundTimeout: TypedContractMethod<[], [bigint], "view">;

  releaseTimeout: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveRelease"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoRelease"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "driver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isCompleted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "passenger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundTimeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseTimeout"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "Released"
  ): TypedContractEvent<
    ReleasedEvent.InputTuple,
    ReleasedEvent.OutputTuple,
    ReleasedEvent.OutputObject
  >;

  filters: {
    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "Refunded(address,uint256,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "Released(address,uint256,uint256,address,uint256)": TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
    Released: TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
  };
}
